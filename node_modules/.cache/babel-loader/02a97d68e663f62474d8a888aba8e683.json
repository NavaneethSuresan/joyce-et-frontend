{"ast":null,"code":"import axios from 'axios';\nconst LOGIN_USER_KEY = 'WD_FORUM_LOGIN_USER_KEY';\nvar baseURL;\n\nif (process.env.REACT_APP_ENVIRONMENT && process.env.REACT_APP_ENVIRONMENT === 'PRODUCTION') {\n  baseURL = process.env.REACT_APP_API_BASE_URL;\n} else {\n  baseURL = 'http://127.0.0.1:8000';\n}\n\nconst api = axios.create({\n  baseURL: baseURL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n/**\n * Add requireToken: true in request config, for API that required Authorization token\n */\n\napi.interceptors.request.use(config => {\n  if (config.requireToken && localStorage.getItem(LOGIN_USER_KEY)) {\n    config.headers.common['Authorization'] = JSON.parse(localStorage.getItem(LOGIN_USER_KEY)).token;\n  }\n\n  return config;\n}, err => {\n  console.error(err);\n});\nexport default class API {\n  constructor() {\n    this.getPlaces = async (search, category, id) => {\n      let url = '/places/';\n      let query = new URLSearchParams();\n\n      if (search) {\n        query.append('search', search);\n      }\n\n      if (category) {\n        query.append('category', category);\n      }\n\n      if (category) {\n        query.append('id', id);\n      }\n\n      if (query.toString() !== '') {\n        url += '?' + query.toString();\n      }\n\n      const places = await api.get(url).then(response => {\n        return response.data;\n      }).catch(error => {\n        throw new Error(error);\n      });\n      return places;\n    };\n\n    this.getCategories = async () => {\n      const categories = await api.get('/categories/').then(response => {\n        return response.data;\n      }).catch(error => {\n        throw new Error(error);\n      });\n      return categories;\n    };\n  }\n\n}","map":{"version":3,"names":["axios","LOGIN_USER_KEY","baseURL","process","env","REACT_APP_ENVIRONMENT","REACT_APP_API_BASE_URL","api","create","headers","interceptors","request","use","config","requireToken","localStorage","getItem","common","JSON","parse","token","err","console","error","API","getPlaces","search","category","id","url","query","URLSearchParams","append","toString","places","get","then","response","data","catch","Error","getCategories","categories"],"sources":["/Users/apple/Desktop/Joycd_Sd_Updated/frontend/src/API.js"],"sourcesContent":["import axios from 'axios';\nconst LOGIN_USER_KEY = 'WD_FORUM_LOGIN_USER_KEY';\n\nvar baseURL;\nif (process.env.REACT_APP_ENVIRONMENT && process.env.REACT_APP_ENVIRONMENT === 'PRODUCTION') {\n    baseURL = process.env.REACT_APP_API_BASE_URL;\n} else {\n    baseURL = 'http://127.0.0.1:8000';\n}\n\n\nconst api = axios.create({\n    baseURL: baseURL,\n    headers: {\n        'Content-Type': 'application/json'\n    }\n});\n\n/**\n * Add requireToken: true in request config, for API that required Authorization token\n */\napi.interceptors.request.use(\n    config => {\n        if (config.requireToken && localStorage.getItem(LOGIN_USER_KEY)) {\n            config.headers.common['Authorization'] = JSON.parse(localStorage.getItem(LOGIN_USER_KEY)).token;\n        }\n\n        return config;\n    },\n    err => {\n        console.error(err);\n    }\n);\n\nexport default class API {\n    getPlaces = async (search, category, id) => {\n        let url = '/places/';\n        let query = new URLSearchParams();\n        if (search) {\n            query.append('search', search);\n        }\n        if (category) {\n            query.append('category', category);\n        }\n        if (category) {\n            query.append('id', id);\n        }\n\n        if (query.toString() !== '') {\n            url += '?' + query.toString();\n        }\n\n        const places = await api\n            .get(url)\n            .then(response => {\n                return response.data;\n            })\n            .catch((error) => {\n                throw new Error(error);\n            });\n        return places;\n    };\n    getCategories = async () => {\n        const categories = await api\n            .get('/categories/')\n            .then(response => {\n                return response.data;\n            })\n            .catch(error => {\n                throw new Error(error);\n            });\n        return categories;\n    };\n}\n"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,MAAMC,cAAc,GAAG,yBAAvB;AAEA,IAAIC,OAAJ;;AACA,IAAIC,OAAO,CAACC,GAAR,CAAYC,qBAAZ,IAAqCF,OAAO,CAACC,GAAR,CAAYC,qBAAZ,KAAsC,YAA/E,EAA6F;EACzFH,OAAO,GAAGC,OAAO,CAACC,GAAR,CAAYE,sBAAtB;AACH,CAFD,MAEO;EACHJ,OAAO,GAAG,uBAAV;AACH;;AAGD,MAAMK,GAAG,GAAGP,KAAK,CAACQ,MAAN,CAAa;EACrBN,OAAO,EAAEA,OADY;EAErBO,OAAO,EAAE;IACL,gBAAgB;EADX;AAFY,CAAb,CAAZ;AAOA;AACA;AACA;;AACAF,GAAG,CAACG,YAAJ,CAAiBC,OAAjB,CAAyBC,GAAzB,CACIC,MAAM,IAAI;EACN,IAAIA,MAAM,CAACC,YAAP,IAAuBC,YAAY,CAACC,OAAb,CAAqBf,cAArB,CAA3B,EAAiE;IAC7DY,MAAM,CAACJ,OAAP,CAAeQ,MAAf,CAAsB,eAAtB,IAAyCC,IAAI,CAACC,KAAL,CAAWJ,YAAY,CAACC,OAAb,CAAqBf,cAArB,CAAX,EAAiDmB,KAA1F;EACH;;EAED,OAAOP,MAAP;AACH,CAPL,EAQIQ,GAAG,IAAI;EACHC,OAAO,CAACC,KAAR,CAAcF,GAAd;AACH,CAVL;AAaA,eAAe,MAAMG,GAAN,CAAU;EAAA;IAAA,KACrBC,SADqB,GACT,OAAOC,MAAP,EAAeC,QAAf,EAAyBC,EAAzB,KAAgC;MACxC,IAAIC,GAAG,GAAG,UAAV;MACA,IAAIC,KAAK,GAAG,IAAIC,eAAJ,EAAZ;;MACA,IAAIL,MAAJ,EAAY;QACRI,KAAK,CAACE,MAAN,CAAa,QAAb,EAAuBN,MAAvB;MACH;;MACD,IAAIC,QAAJ,EAAc;QACVG,KAAK,CAACE,MAAN,CAAa,UAAb,EAAyBL,QAAzB;MACH;;MACD,IAAIA,QAAJ,EAAc;QACVG,KAAK,CAACE,MAAN,CAAa,IAAb,EAAmBJ,EAAnB;MACH;;MAED,IAAIE,KAAK,CAACG,QAAN,OAAqB,EAAzB,EAA6B;QACzBJ,GAAG,IAAI,MAAMC,KAAK,CAACG,QAAN,EAAb;MACH;;MAED,MAAMC,MAAM,GAAG,MAAM3B,GAAG,CACnB4B,GADgB,CACZN,GADY,EAEhBO,IAFgB,CAEXC,QAAQ,IAAI;QACd,OAAOA,QAAQ,CAACC,IAAhB;MACH,CAJgB,EAKhBC,KALgB,CAKThB,KAAD,IAAW;QACd,MAAM,IAAIiB,KAAJ,CAAUjB,KAAV,CAAN;MACH,CAPgB,CAArB;MAQA,OAAOW,MAAP;IACH,CA3BoB;;IAAA,KA4BrBO,aA5BqB,GA4BL,YAAY;MACxB,MAAMC,UAAU,GAAG,MAAMnC,GAAG,CACvB4B,GADoB,CAChB,cADgB,EAEpBC,IAFoB,CAEfC,QAAQ,IAAI;QACd,OAAOA,QAAQ,CAACC,IAAhB;MACH,CAJoB,EAKpBC,KALoB,CAKdhB,KAAK,IAAI;QACZ,MAAM,IAAIiB,KAAJ,CAAUjB,KAAV,CAAN;MACH,CAPoB,CAAzB;MAQA,OAAOmB,UAAP;IACH,CAtCoB;EAAA;;AAAA"},"metadata":{},"sourceType":"module"}