{"ast":null,"code":"import axios from 'axios';\nconst LOGIN_USER_KEY = 'WD_FORUM_LOGIN_USER_KEY';\nvar baseURL; // if (process.env.REACT_APP_ENVIRONMENT && process.env.REACT_APP_ENVIRONMENT === 'PRODUCTION') {\n//     baseURL = process.env.REACT_APP_API_BASE_URL;\n// } else {\n//     baseURL = 'http://127.0.0.1:8000';\n// }\n\nbaseURL = 'http://127.0.0.1:8000/';\nconst api = axios.create({\n  baseURL: baseURL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n/**\n * Add requireToken: true in request config, for API that required Authorization token\n */\n// api.interceptors.request.use(\n//     config => {\n//         if (config.requireToken && localStorage.getItem(LOGIN_USER_KEY)) {\n//             config.headers.common['Authorization'] = JSON.parse(localStorage.getItem(LOGIN_USER_KEY)).token;\n//         }\n//         return config;\n//     },\n//     err => {\n//         console.error(err);\n//     }\n// );\n\nexport default class API {\n  constructor() {\n    this.getPlaces = async (search, category) => {\n      let url = '/places/';\n      let query = new URLSearchParams();\n\n      if (search) {\n        query.append('search', search);\n      }\n\n      if (category) {\n        query.append('category', category);\n      }\n\n      if (query.toString() !== '') {\n        url += '?' + query.toString();\n      }\n\n      const places = await api.get(url).then(response => {\n        return response.data;\n      }).catch(error => {\n        throw new Error(error);\n      });\n      return places;\n    };\n\n    this.getCategories = async () => {\n      const categories = await api.get('/categories/').then(response => {\n        return response.data;\n      }).catch(error => {\n        throw new Error(error);\n      });\n      return categories;\n    };\n  }\n\n}","map":{"version":3,"names":["axios","LOGIN_USER_KEY","baseURL","api","create","headers","API","getPlaces","search","category","url","query","URLSearchParams","append","toString","places","get","then","response","data","catch","error","Error","getCategories","categories"],"sources":["/Users/apple/Desktop/joycd_sd_final/frontend/src/API.js"],"sourcesContent":["import axios from 'axios';\nconst LOGIN_USER_KEY = 'WD_FORUM_LOGIN_USER_KEY';\n\nvar baseURL;\n// if (process.env.REACT_APP_ENVIRONMENT && process.env.REACT_APP_ENVIRONMENT === 'PRODUCTION') {\n//     baseURL = process.env.REACT_APP_API_BASE_URL;\n// } else {\n//     baseURL = 'http://127.0.0.1:8000';\n// }\n baseURL = 'http://127.0.0.1:8000/';\n\nconst api = axios.create({\n    baseURL: baseURL,\n    headers: {\n        'Content-Type': 'application/json'\n    }\n});\n\n/**\n * Add requireToken: true in request config, for API that required Authorization token\n */\n// api.interceptors.request.use(\n//     config => {\n//         if (config.requireToken && localStorage.getItem(LOGIN_USER_KEY)) {\n//             config.headers.common['Authorization'] = JSON.parse(localStorage.getItem(LOGIN_USER_KEY)).token;\n//         }\n\n//         return config;\n//     },\n//     err => {\n//         console.error(err);\n//     }\n// );\n\nexport default class API {\n    getPlaces = async (search, category) => {\n        let url = '/places/';\n        let query = new URLSearchParams();\n        if (search) {\n            query.append('search', search);\n        }\n        if (category) {\n            query.append('category', category);\n        }\n\n        if (query.toString() !== '') {\n            url += '?' + query.toString();\n        }\n\n        const places = await api\n            .get(url)\n            .then((response) => {\n                return response.data;\n            })\n            .catch((error) => {\n                throw new Error(error);\n            });\n        return places;\n    };\n    getCategories = async () => {\n        const categories = await api\n            .get('/categories/')\n            .then(response => {\n                return response.data;\n            })\n            .catch(error => {\n                throw new Error(error);\n            });\n        return categories;\n    };\n}\n"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,MAAMC,cAAc,GAAG,yBAAvB;AAEA,IAAIC,OAAJ,C,CACA;AACA;AACA;AACA;AACA;;AACCA,OAAO,GAAG,wBAAV;AAED,MAAMC,GAAG,GAAGH,KAAK,CAACI,MAAN,CAAa;EACrBF,OAAO,EAAEA,OADY;EAErBG,OAAO,EAAE;IACL,gBAAgB;EADX;AAFY,CAAb,CAAZ;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,MAAMC,GAAN,CAAU;EAAA;IAAA,KACrBC,SADqB,GACT,OAAOC,MAAP,EAAeC,QAAf,KAA4B;MACpC,IAAIC,GAAG,GAAG,UAAV;MACA,IAAIC,KAAK,GAAG,IAAIC,eAAJ,EAAZ;;MACA,IAAIJ,MAAJ,EAAY;QACRG,KAAK,CAACE,MAAN,CAAa,QAAb,EAAuBL,MAAvB;MACH;;MACD,IAAIC,QAAJ,EAAc;QACVE,KAAK,CAACE,MAAN,CAAa,UAAb,EAAyBJ,QAAzB;MACH;;MAED,IAAIE,KAAK,CAACG,QAAN,OAAqB,EAAzB,EAA6B;QACzBJ,GAAG,IAAI,MAAMC,KAAK,CAACG,QAAN,EAAb;MACH;;MAED,MAAMC,MAAM,GAAG,MAAMZ,GAAG,CACnBa,GADgB,CACZN,GADY,EAEhBO,IAFgB,CAEVC,QAAD,IAAc;QAChB,OAAOA,QAAQ,CAACC,IAAhB;MACH,CAJgB,EAKhBC,KALgB,CAKTC,KAAD,IAAW;QACd,MAAM,IAAIC,KAAJ,CAAUD,KAAV,CAAN;MACH,CAPgB,CAArB;MAQA,OAAON,MAAP;IACH,CAxBoB;;IAAA,KAyBrBQ,aAzBqB,GAyBL,YAAY;MACxB,MAAMC,UAAU,GAAG,MAAMrB,GAAG,CACvBa,GADoB,CAChB,cADgB,EAEpBC,IAFoB,CAEfC,QAAQ,IAAI;QACd,OAAOA,QAAQ,CAACC,IAAhB;MACH,CAJoB,EAKpBC,KALoB,CAKdC,KAAK,IAAI;QACZ,MAAM,IAAIC,KAAJ,CAAUD,KAAV,CAAN;MACH,CAPoB,CAAzB;MAQA,OAAOG,UAAP;IACH,CAnCoB;EAAA;;AAAA"},"metadata":{},"sourceType":"module"}